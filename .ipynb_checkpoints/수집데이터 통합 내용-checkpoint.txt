1. 파일 통합 순서
 - file_path = "./~~~"
 - abc = pd.read_(file_path, header=, skipfooter=, usecols="A:Z")
 - abc.info()
 - abc.describe()
 - abc[""] = "" (컬럼 추가)
 - abc[""].unique() "고유한 값들만 조회
 - abc[""].isin([""]) 필터링 방법
 - abc.reset_index(drop=True) 인덱스 순차적 재정의/ (drop=True) 기존 인덱스 번호를 사용안하겠다는 의미
 - continents = []*2 + []*@ 컬럼에 추가 할 대륙이름 리스트로 생성
 - abc["] = round(abc[""] / abc[""] * 100, 3) 비율계산
 - sum은 총합



2. 데이터 시각화
 - 통합된 파일 읽어들이기
 - 데이터프레이 변수명 : df
 - 데이터프레임 정보 확인하기
 - 결측데이터 있는지 확인하기
 - file_path = "./abc/.xlsx"
 - abc = pd.read_(file_path)
 - df.head(1)

 - 기초통계 확인
 - 이상치확인 (min, max)
 - abc.describe()

 ### 시각화 라이브러리 정의

 # - 파이썬에서 사용되는 기본 시각화 라이브러리
 import matplotlib.pyplot as plt

 ### 한글처리
 plt.rc("font", family="Malgun Gothic")

 # - 마이너스 기호 깨짐 처리
 plt.rcParams["axes.unicode_minus"] = False


3.  이것 저것 함수
 - 통계 구하는 함수 abc.pivot_table(index="", values="", aggfunc="mean,sum,count etc..."
 - abc.sort_values("values", ascending=False)
	- 오름차순 : 낮은 값부터 ~ 높은 값 순으로 정렬 (ascending)
	- 내림차순 : 높은 값부터 ~ 낮은 값 순으로 정렬 (decending)
 - abc.reset_index
	- (inplace=True)를 파라미터로 정의

 - 만약 import numpy
	avg = numpy.mean, sum("values") 평균값또는 더한값 구하기 

 - ab.fillna(0) - Nan이 있는 모든 데이터를 0으로 치환(대체)하기

 - abc.groupby([""], as_index=False).sum()
	- as_index=False : 그룹 형태를 데이터프레임 형태로 index 영역을 컬럼으로 올립니다.
	- groupby는 무언가 계산을 할 때 합쳐서 계산하기 위해 있는 함수 입니다

 - abc.drop[숫자]
	- 숫자에 있는 인덱스 행을 삭제합니다

 - abc.loc[] / abd.iloc[]
 - 지금까지 사용한 DataFrame 이름 뒤에 대괄호 안에 사용한 행번호는
    -> 눈에 보이는 인덱스 값 입니다. (메모리 내에서 관리하는 인덱스 번호가 아님)
 - 인덱스 값을 이용하는 경우에는 -> 실제 눈에 보이는 값(번호)만 사용 가능
 - DataFrame 내에 행/렬, 또는 특정 행렬 값에 접근하여 수정 등을 수행 할 경우에는
    -> 넘파이(Numpy)에서 제공하는 loc외 iloc를 이용해야 합니다.
    -> loc와 iloc는 실제 메모리에 접근해서 사용하는 방식 입니다.
    -> 특정 컬럼의 값을 수정하고 할 때 주로 loc 또는 iloc로 접근하여 사용하면 됩니다.
    -> 이외 일반적으로 데이터 조회 시에도 사용됩니다.
 - loc[] : 인덱스 값을 이용하여 접근하는 방식(눈에 보이는 값)
 - iloc[] : 실제 메모리에서 관리하는 인덱스 번호로 접근하는 방식(메모리 번호)
 - Numpy 라이브러리 숫치 데이터 처리(연산 등 처리)를 위한 특화된 라이브러리

 - 인덱스 행 데이터를 조회 하는 경우 
	- 슬라이싱(:)으로 사용 할 경우에는 대괄호 1개 사용
	- 콤마(,)를 사용 할 경우에는 대괄호 2개 사용

4. 시각화 그래프
 -그래프 전체 크기 조정 : figsize(너비, 높이)
 plt.figure(figsize(너비, 높이))

 plt.title("title")


 ### 선 그래프 그리기
 plt.plot(value, color="", label="")
 plt.bar(value, color="", width="")

 ### x축 y축 이름 넣기
 plt.xlabel("x축 이름", fontsize=숫자)
 plt.ylabel("y축 이름", fontsize=숫자)

 plt.xticks(rotation=90, fontsize=숫자)
 plt.yticks(fontsize=숫자)
 # plt.ylim([85,90]) - y축 범위 지정

### 그리드 그리기
 plt.grid(True, linestyle='--', alpha=0.7)

 plt.tight_layout()

### 평균선
 plt.axhline(y=45077, color='green', linestyle='-', linewidth=2, label = "전체평균")

plt.legend()

plt.show()

5. 데이터 타입 확인 및 변환
abc.dtypes
abc[""].astype(변환할 정보)

6. DataFrame 정보 확인하기
- 컬럼 이름만 가지고 오기
abc.columns
list(abc.columns)
 - 각 컬럼의 행의 갯수 확인하기
abc.count()

 - 특정 컬럼의 행의 갯수 확인하기
abc["day"].count()

 - DataFrame 인덱스 범위 확인하기
abc.index

 - 모든 컬럼들의 값들만 조회하기(컬럼 없이 값들만, 리스트로 반환)
abc.values

### 정렬하기
 - axis = 0 : 행단위로 정렬 (0은 열단위로 정렬, 열단위 정렬은 전체에 대해서만 진행됨 / 1은 행단위 정렬)
 대부분 0을 사용
 tips.sort_values(by=["total_bill"], ascending=False, axis = 0)


빈도 확인하기
### 빈도는 범주형 데이터에 대한 간단한 집계를 할 때 사용
abc[""].value_counts()

### 간단히 집계하는 방법
abc[["a", "b"]]

### 성별 및 요일별로 집계하기
# - crosstab(인덱스 영역, 컬럼 영역)
#    -> 피봇 테이블의 결과와 유사
 1-1pd.crosstab(abc["a"], abc["b"])

-> margins = True : 행단위, 열단위 전체 값들을 sum 한 값이 All이란 이름으로 생성됨
 1-2 pd.crosstab(abc["a"], abc["b"], margins = True)