/*
 - 사용자 1명당 -> Database 공간 1개가 만들어짐
*/

/*
<SQL>
 - 데이터베이스 서버와 소통을 위해 사용하는 언어
 - Structured Query Language(구조적 질의 언어)
 - SQL은 구조적으로 정의된 문법을 따릅니다. 
   (응용보다는 정의된 문법으로 논리적으로 사용합니다.)

<객체 처리에 사용되는 명령>
 - 객체 생성: Create문
 - 객체 수정: Alter문
 - 객체 삭제: Drop문
 
<데이터 처리에 사용되는 명령>
 - 데이터 입력: Insert문
 - 데이터 수정: Update문
 - 데이터 삭제: Delete문
 - 데이터 조회: Select문
  -> 데이터 처리의 90% 이상은 조회를 위한 Select가 사용됨
  
<데이터베이스 설치 후 순서>
 1. system계정으로 접속 후 사용자 계정 및 패스워드 생성
 2. 생성된 사용자 계정에 권한 부여
 3. 생성된 사용자로 데이터베이스에 접속
 4. 생성된 사용자 공간에 데이터 저장공간(테이블 객체)을 생성
 5. 생성된 테이블 공간에 데이터 입력/수정/삭제/조회 처리
*/

/* 테이블 객체 생성하기 */
-- 테이블: 행렬로 이루어진 공간을 의미함
--      : 데이터를 담아 놓기 위한 저장 공간을 의미함
--      : 테이블 생성은 Create문으로 생성
--      : 테이블 생성 시에는 최소한 1개 이상의 컬럼(열)이 필요함
--      : 컬럼(열)은 타입(문자, 정수, 실수, 날짜 등등)을 지정해야함

/* test_tb 이름을 가지는 테이블 생성하기 */
Create Table test_tb(
    -- 컬럼 만들기
    -- 컬럼이름 타입(길이byte) Null 여부
    id varchar2(15) not null,
    pw varchar2(50) not null,
    -- Null여부를 정의하지 않으면, 기본 null 사용
    name varchar2(20)
);

/* 테이블 수정 */
-- 테이블 수정은: 컬럼추가, 컬럼삭제, 컬럼타입변경, 컬럼사이즈변경,
--              기타 컬럼 관련 설정에 대한 수정만 가능함.
/* test_tb 테이블에 age컬럼의 정수 타입, 8사이즈 추가 */
Alter table test_tb
    -- 추가(add)
    -- 추가할 컬럼 정의, number(정수 타입)
    -- 8byte 사이즈: 천만단위 사이즈 사용 가능
    add(age number(8));
    
/* test_tb 테이블 내에 name 컬럼의 사이즈를 15 사이즈로 수정하기 
   (중요) 컬럼의 타입 또는 사이즈를 수정할 때 주의점
   - 컬럼에 데이터가 없는 경우
    -> 그냥 수정하면 됨
   - 컬럼에 데이터가 있는 경우
    -> 존재하는 데이터의 최대 길이 미만으로는 수정불가
    -> 존재하는 컬럼의 타입이 문자인 경우,
       숫자 타입으로 변경 불가
*/

Alter Table test_tb
    -- 컬럼 정보 수정(modify)
    modify(
        -- 컬럼의 사이즈 변경 시 타입까지 모두 작성
        name varchar(15)
     );
     
/* 테이블 삭제하기 */
Drop Table test_tb;

/*
<데이터 처리하기>
 - 데이터 입력, 수정, 삭제, 조회 처리
 - 데이터는 최초에 입력을 해야 수정, 삭제, 조회가 가능함
 - 데이터 입력을 위해서는 -> 테이블(데이터 공간)이 존재해야함
*/

/* 데이터 입력(Insert) 하기 */
-- 아이디: test01
-- 패스위드: test_01_pw
-- 이름: 홍길동
-- 나이: 20

Insert Into test_tb(
    id, pw, name, age
) Values(
    -- SQL에서는 문자열 값은 작은따옴표만 사용됩니다.
    'test01', 'test_01_pw', '홍길동', 20
);

Insert Into test_tb(
    id, pw, name, age
) Values(
    -- SQL에서는 문자열 값은 작은따옴표만 사용됩니다.
    'test02', 'test_02_pw', '이순신', 50
);

/* 입력되어 있는 데이터 조회(SELECT)하기 */
SELECT ID
FROM TEST_TB;

-- 아이디와 패스워드의 모든 값 조회하기
SELECT ID,PW
FROM TEST_TB;

-- 아이디, 패스워드, 이름, 나이 모든 값 조회하기
-- (해석 중요)
-- 조회 > 어디에서> TEST_TB에서
-- 조회할 컬럼은 ID, PW, NAME, AGE
-- 조건(필터조건)이 없기 때문에 모든 행의 값 조회시킴
-- 전체 조회하는 방법(1)
SELECT ID, PW, NAME, AGE
FROM TEST_TB;

-- 전체 조회하는 방법(2)
SELECT *
FROM TEST_TB;

/* 조건절(WHERE) 이용하기 */
-- 조건절(WHERE) 이하에 조건연산자(비교연산자) 사용
-- 조건연산자의 결과는 TRUE OR FALSE 입니다.
-- 데이터프레임에서 필터링 조건과 동일한 개념

/* 아이디가 TEST01인 모든 컬럼의 데이터 조회하기 */
SELECT *
FROM TEST_TB
-- 조건연산자
-- * 같다(=), >, <, >=, <=
--   같지않다(!=, <>): != 을 주로 사용함
WHERE ID = 'test01';

/* 아이디가 test01인 데이터 중에 
  - 이름을 김유신으로 수정
  - 나이를 44살로 수정
 ***(수정하기 전 중요한 작업)
  - 수정하고자 하는 대상의 정보를 조회 먼저 해야 합니다.
   (조회하고자 하는 SQL 구문은 수정 후 검증확인을 위해 사용됨)
   (또한 조회할때 사용한 조건은 수정시 조건으로 사용됨)
*/
-- 검증 및 수정 시 사용할 조건을 먼저 확인하기
-- 수정할 데이터가 맞는지 확인, 몇 건이 수정되는지도 확인
SELECT *
FROM TEST_TB
WHERE ID = 'test01';

-- 데이터 수정(UPDATE) 하기
UPDATE TEST_TB
    SET NAME = '김유신', AGE = 44
WHERE ID = 'test01';

-- WHERE절이 없으면 어떻게 될까?

UPDATE TEST_TB
    SET NAME = '홍길동2', AGE = 80;
    
SELECT *
FROM TEST_TB;

-- 데이터에 대한 입력/수정/삭제 처리는 복구(취소)가 가능함
-- **커밋하면 저장 됨
COMMIT;

SELECT *
FROM TEST_TB;

ROLLBACK;

SELECT *
FROM TEST_TB;


/*

*/