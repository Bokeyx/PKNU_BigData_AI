<React 프로젝트 신규 생성 : 기본 사용법 실습>
 1. React 신규 프로젝트 생성
   - 프로젝트명 : day50_02-react-app
    >npx create-react-app day50_02-react-app

 2. 프로젝트 생성 후 서버 구동 테스트 하기
   - 생성된 프로젝트로 이동
    >cd day50_02-react-app

   - 서버 실행
    >npm start

 3. Front-End 프로그램
   - ./public/index.html : 수정 없음
   - ./src/index.js : 수정 없음

   - ./src/App.css : 전체 수정
   - ./src/App.js : 전체 수정




<React 프로젝트 신규 생성 : 기본 사용법 실습>
 1. React 신규 프로젝트 생성
   - 프로젝트명 : day50_03-react-app
    >npx create-react-app day50_03-react-app

 2. 프로젝트 생성 후 서버 구동 테스트 하기
  - 프로젝트 폴더로 이동
    >cd day50_03-react-app

  - 서버 실행
    >npm start

3. Front-End 프로그램 : React의 "prop" 개념 적용
   - ./public/index.html : 수정 없음
   - ./src/index.js : 수정 없음

   - ./src/App.js : 전체 수정
   - ./src/WelcomeMessage.js 컴포넌트 생성 (파일명은 대문자로 시작)
   - ./src/UserProfile.js 컴포넌트 생성 (파일명은 대문자로 시작)


<React 프로젝트 신규 생성 : 컴포넌트 재사용(반복 수행) 실습>
 1. React 신규 프로젝트 생성
   - 프로젝트명 : day50_04-react-app
    >npx create-react-app day50_04-react-app

 2. 프로젝트 생성 후 서버 구동 테스트 하기
  - 프로젝트 폴더로 이동
    >cd day50_04-react-app

  - 서버 실행
    >npm start

3. Front-End 프로그램 : 컴포넌트 재사용(반복 수행)
   - ./public/index.html : 수정 없음
   - ./src/index.js : 수정 없음

   - ./src/App.js : 전체 수정
   - ./src/Card.js : 신규 생성
   - ./src/ProfileList.js : 신규생성


<React 프로젝트 신규 생성: 기본 사용법 실습 5>
 1. React 신규 프로젝트 생성
  - 프로젝트명: day51_05-react-app
   >npx create-react-app day51_05-react-app
 
 2. 프로젝트 생성 후 서버 구동 테스트 하기
  - 생성된 프로젝트로 이동
   >cd day51_05-react-app

  - 서버 실행
   >npm start

 3. Front-End 프로그램
  - ./public/index.html: 수정 없음
  - ./src/index.js: 수정 없음

  - ./src/App.js: 전체 수정

  # 사용자 상태 정보를 저장 후 다른 컴포넌트에 사용할 수 있도록 공유
  - ./src/AuthContext.js

  # 로그인/로그아웃 상태관리 페이지: 기능 처리 컴포넌트
  - ./src/Header.js

  # 사용자 로그인 폼: 보여지는 페이지
  - LoginForm.js

  # 로그인 후 보여질 화면: 보여지는 페이지
  - Dashboard.js

  <React 프로젝트 신규 생성 : 기본 사용법 실습>
 1. React 신규 프로젝트 생성
   - 프로젝트명 : day50_06-react-app
    >npx create-react-app day50_06-react-app

 2. 프로젝트 생성 후 서버 구동 테스트 하기
   - 생성된 프로젝트로 이동
    >cd day50_06-react-app

   - 서버 실행
    >npm start

 3. Front-End 프로그램
   - ./public/index.html : 수정 없음
   - ./src/index.js : 수정 없음

   - ./src/App.js : 전체 수정
    - UserFrom.js 컴포넌트만 import 하여
      함수에 return에 포함만 하여, 브라우저에서 입력 폼 확인
  
   # 사용자 입력 폼 페이지 작성
   - ./src/UserForm.js
     * React와 useState만 import

   * 이름과 이메일을 입력하는 form 작성
   - 이름: text type으로
   - 이메일: email type으로
   - 이름 및 이메일 입력 시 onChange 이벤트 발생
    -> 이름과 이메일에 대한 useState을 생성하여
    -> onChange 시에 이름과 이메일 값 저장 시키기

<React 프로젝트 신규 생성 : 댓글 형태 실습>
 1. React 신규 프로젝트 생성
   - 프로젝트명 : day50_07-react-app
    >npx create-react-app day50_07-react-app

 2. 프로젝트 생성 후 서버 구동 테스트 하기
   - 생성된 프로젝트로 이동
    >cd day50_07-react-app

   - 서버 실행
    >npm start

 3. Front-End 프로그램
   - ./public/index.html : 수정 없음
   - ./src/index.js : 수정 없음

   - ./src/App.js : 전체 수정
    -> React와 CommentBoard만 import
    -> return은 CommentBoard만
  
   - ./src/CommentBoard.js: 댓글 추가 폼 페이지
    -> React와 useState만 import
    -> 댓글 입력폼 작성
     -> text type으로 작성
     -> onChanged 이벤트 발생 후 comment userState을 생성하여 저장하기
    -> [댓글 등록]버튼 생성
     -> button 태그로 생성, type은 submit
     -> 클릭하면 onSubmit 이벤트 발생 후 handleSubmit 함수 호출
     -> handleSubmit 함수에서는 alert 창에 자유롭게 메시지만 띄우기

     <React 프로젝트 신규 생성 : Router 이용 및 페이지 분리 실습>
 1. React 신규 프로젝트 생성
   - 프로젝트명 : day50_08-react-app
    >npx create-react-app day50_08-react-app

   - Router 기능 사용을 위해 라이브러리 설치하기
    >npm install react-router-dom

 2. 프로젝트 생성 후 서버 구동 테스트 하기
   - 생성된 프로젝트로 이동
    >cd day50_08-react-app

   - 서버 실행
    >npm start

 3. Front-End 프로그램
   - ./public/index.html : BootStrap 설정
   - ./src/index.js : 수정 없음

   - ./src/App.js : 전체 수정 -> Router 처리 작성(URL 패턴 처리)

   ** 폴더 구조로 관리
   - ./src/components/Header.js: 상단 공통 네비게이션 메뉴 페이지
   - ./src/components/Layout.js: 전체 레이아웃 템플릿 페이지

   - ./src/pages/Home.js: 메인 소개 페이지
   - ./src/pages/day51_05/: 폴더 까지만 만들기
   - ./src/pages/day51_06/: 폴더 까지만 만들기
   - ./src/pages/day51_07/: 폴더 까지만 만들기

   - ./src/css/: 폴더 까지만 만들기

 4. BootStrap 적용하기
  <React내에 설치 방식으로 진행>
   - React 설치하기
    >npm install bootstrap

   - 적용 방법
    -> 보통 전역적으로 사용할 수 있는 위치에 import 하여 사용
    -> App.js 영역을 주로 사용함
    -> import "bootstrap/dist/css/bootstrap.min.css";

  <외부 파일 또는 CDN 링크 방식으로 진행>

 5. day51_bootstrap 폴더 사용 
  - ./src/pages/폴더 하위에 day51_bootstrap 폴더 위치 시키기
  - day51_bootstrap 폴더 내에 BootStrapExample.js 파일이 시작 파일
  - Header.js에 링크 추가
  - App.js에 URL 패턴 추가: URL 패턴은 자유롭게