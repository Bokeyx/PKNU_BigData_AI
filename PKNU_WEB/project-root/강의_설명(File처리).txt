<전체 폴더 구조>

📁 backend-springboot
├── pom.xml
├── src
│   └── main
│       ├── java
│       │   └── com/pknu/project
│       │       ├── controller/board
│       │       │               └── BoardController.java ← 게시판 API 컨트롤러
│       │       ├── dto/board
│       │       │       ├── BoardDTO.java ← 게시글 DTO
│       │       │       └── BoardFileDTO.java ← 파일 DTO
│       │       ├── model/board
│       │       │           ├── Board.java ← 게시글 엔티티
│       │       │           └── BoardFile.java ← 첨부파일 엔티티
│       │       ├── repository/board
│       │       │               ├── BoardRepository.java ← 게시글 JPA 리포지토리
│       │       │               └── BoardFileRepository.java ← 파일 JPA 리포지토리
│       │       └── service
│       │            └── BoardService.java ← 게시판 비즈니스 로직
│       │            └── BoardFileService.java ← 게시판 비즈니스 로직
│       └── resources
│           └── application.properties
├── 📁 uploads 디렉토리 (파일 저장용 실제 폴더, 루트 디렉토리에 생성됨)
│       └── board/ ← 실제 파일이 저장되는 경로
│--------------------------------------------------------
│
📁 frontend-react
    ├── package.json
    ├── public
    │   └── index.html
    └── src
    ├── App.jsx ← 라우터 설정 포함
    ├── index.js
    ├── config
    │   └── axiosInstance_board.js ← board의 file 처리를 위해 별도 인스턴스 사용
    ├── routers
    │   └── BoardRouters.jsx ← 전체 라우팅 파일
    ├── pages/board ← 각 기능별 단독 파일로 작성(components로 분리 안했음->향후 각자 분리)
    │           ├── BoardList.jsx ← 게시글 목록
    │           ├── BoardInsert.jsx ← 게시글 작성 (다중 파일 업로드)
    │           ├── BoardView.jsx ← 게시글 상세보기 + 다운로드
    │           └── BoardUpdate.jsx ← 게시글 수정 (파일 교체/삭제)
    ├── service/board
    │           └── boardApi.js ← 게시판 API 호출 모듈
    └── components/board
                    └── BoardListItem.jsx ← 목록에서 글 하나 렌더링용 컴포넌트 (선택 사항)


-----------------------------------------------------------


<게시물 관리를 위한 Table 생성>
/**********************************************************************
                        [테이블 생성 공통사항]
 **********************************************************************
 - 글 하나(BOARD)에 여러 개의 파일(BOARD_FILES)이 첨부될 수 있어야 함 (1:N 관계)
   -> 부모(board) -> 자식(board_files)
   
 - ID는 자동 증가 시퀀스를 내장 방식으로 제공 (Oracle의 IDENTITY 기능 사용)
   -> PRIMARY KEY는 GENERATED ALWAYS AS IDENTITY 사용
   -> GENERATED ALWAYS AS IDENTITY : 자동 증가값 사용
     --> Oracle DB가 내부적으로 Sequence를 생성하여 자동 증가 처리 수행함
***********************************************************************/

/*
 게시물 관리
*/
CREATE TABLE board (
    board_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, -- 게시글 고유 ID
    title VARCHAR2(255) NOT NULL,                             -- 게시글 제목
    content CLOB,                                              -- 게시글 내용
    writer VARCHAR2(100),                                      -- 작성자
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,            -- 작성일시
    updated_at TIMESTAMP                                       -- 수정일시
);

/*
 테스트 데이터 입력하기
*/
Insert Into board (title, content, writer) 
    values('테스트 입력', '테스트 입력 내용', '홍길동');

commit;

/*
 - 게시물 하나당 -> 파일 여러개 관리 테이블
  - 게시글 삭제 시 관련 파일도 자동 삭제 처리 (ON DELETE CASCADE)
*/
CREATE TABLE board_files (
    file_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,   -- 파일 고유 ID
    board_id NUMBER NOT NULL,                                  -- 게시글 ID (외래키)
    original_filename VARCHAR2(255) NOT NULL,                  -- 업로드된 원본 파일명
    stored_filename VARCHAR2(255) NOT NULL,                    -- 서버에 저장된 파일명
    mime_type VARCHAR2(100),                                   -- MIME 타입 (e.g., image/png)
    file_size NUMBER,                                          -- 파일 크기 (바이트)
    upload_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,           -- 업로드 시각
    CONSTRAINT fk_board_files_board FOREIGN KEY (board_id)
        REFERENCES board(board_id) ON DELETE CASCADE           -- 게시글 삭제 시 파일도 삭제
);

/*
 - 인덱스 추가 (성능 향상을 위함)
 - board_files 테이블을 board 테이블과 Join 없이 단독으로 사용하여
   -> board_files 테이블의 board_id 컬럼을 이용하여
      where 조건으로 사용할 경우에 빠른 검색(조회)을 위해 사용
*/
CREATE INDEX idx_board_files_board_id ON board_files(board_id);


-----------------------------------------------------------


<전체 목록 조회 기능을 작성>
/**********************************************************************
                          [공통사항]
 **********************************************************************
 - Spring Boot + Oracle 백엔드에서 게시글 목록(board 테이블)을 조회

 - React 프론트엔드에서 전체 게시글 목록을 표시하는 기능을 구현
   -> 파일 목록까지는 포함하지 않고, 게시글(board) 정보만 리스트 형태로 출력
***********************************************************************/

1. SpringBoot 개발 순서
 1.1. Board.java 생성 : board 테이블 CRUD 처리 작성
 1.2. BoardDTO.java 생성 : 데이터 요청 및 응답 처리용
 1.3. BoardRepository.java : 데이터베이스 처리
 1.4. BoardService.java : 데이터 CRUD 처리 요청
 1.5. BoardController.java : 사용자 요청 및 응답 처리

2. React 개발 순서
 2.1. boardApi.js : SpringBoot 서버로 전체 조회 요청 처리
 2.2. BoardList.jsx : 전체 게시물 목록 페이지 처리 
                      (별도로 components 사용하지 않고 하나의 파일로 처리하였음 - 분리가능)
 2.3. BoardRouters.jsx : 전체 게시물 목록 관련 페이지 URL 패턴 처리
 2.4. App.jsx : BoardRouters.jsx 추가
 2.5. HomePage.jsx : [게시물 목록 바로가기] 링크 추가

3. 서버 실행 및 확인
 3.1. SpringBoot Backend 서버 실행 : mvnw spring-boot:run
 3.2. React Frontend 서버 실행 : npm start


-----------------------------------------------------------


<신규 게시글 쓰기 기능 + 다중 파일 업로드 처리 기능을 작성>
/**********************************************************************
                          [공통사항]
 **********************************************************************
 - 전체 목록 페이지에서 -> 게시글을 작성할 수 있도록 [글쓰기 버튼] 추가
 - 파일을 한 번에 여러 개 업로드할 수 있도록 처리
 - 게시글은 board 테이블에 저장
 - 게시글에 대한 -> 업로드된 파일 정보는 board_files 테이블에 저장
***********************************************************************/

0. React 라이브러리 설치
 - 날짜 데이터의 포멧(format, yyyy-mm-dd 형태) 적용을 위한 라이브러리 설치
  -> npm install dayjs

1. SpringBoot 개발 순서
 1.1. BoardFile.java 생성 : BoardFile 테이블 CRUD 처리 (DTO 사용 안함)
 1.2. BoardRepository.java : 데이터베이스 처리
 1.3. BoardService.java : 데이터 CRUD 처리 요청
 1.4. BoardController.java : 사용자 요청 및 응답 처리
 1.5. 업로드 파일을 저장할 폴더 직접 생성 : /upload/board
 1.6. application.properties : 파일 업로드를 위한 속성 정의

2. React 개발 순서
 2.1. boardApi.js : SpringBoot 서버로 입력 요청 처리 작성
 2.2. WriteBoard.jsx : 신규 게시글 입력 페이지 처리 
                      (별도로 components 사용하지 않고 하나의 파일로 처리하였음 - 분리가능)
 2.3. BoardRouters.jsx : 신규 게시글 관련 페이지 URL 패턴 처리

3. 서버 실행 및 확인
 3.1. SpringBoot Backend 서버 실행 : mvnw spring-boot:run
 3.2. React Frontend 서버 실행 : npm start


-----------------------------------------------------------


<상세보기 기능 + 파일 다운로드 처리 기능을 작성>
/**********************************************************************
                          [공통사항]
 **********************************************************************
 - 목록에서 게시글 [클릭] 시 상세보기로 이동
 - 게시글의 상세 정보 + 업로드된 파일 목록 출력 화면 처리
 - 개별 파일 다운로드 : 각각 파일 다운로드 버튼 제공
 - 전체 파일 다운로드 : zip으로 전체 파일 다운로드할 수 있는 버튼 제공
***********************************************************************/

1. SpringBoot 개발 순서
 1.1. BoardRepository.java : 데이터베이스 처리
 1.3. BoardService.java : 상세보기 기능, 개별 파일 다운로드, 전체 파일 다운로드 기능 추가
 1.4. BoardController.java : 상세보기 기능, 개별 파일 다운로드, 전체 파일 다운로드 기능 추가
 1.5. 업로드 파일을 저장할 폴더 직접 생성 : /upload/board

2. React 개발 순서
 2.1. boardApi.js : SpringBoot 서버로 상세보기 기능, 개별 파일 다운로드, 전체 파일 다운로드 요청 처리 작성
 2.2. BoardView.jsx : 게시글 상세 페이지 처리 
                      (별도로 components 사용하지 않고 하나의 파일로 처리하였음 - 분리가능)
 2.3. BoardRouters.jsx : 상세 게시글 관련 페이지 URL 패턴 처리

3. 서버 실행 및 확인
 3.1. SpringBoot Backend 서버 실행 : mvnw spring-boot:run
 3.2. React Frontend 서버 실행 : npm start


-----------------------------------------------------------


<수정 기능 + 파일 수정 처리 기능을 작성>
/**********************************************************************
                          [공통사항]
 **********************************************************************
 - 상세보기에서 "수정" 버튼 클릭 → 수정 폼으로 이동
 - 게시글 내용(title, content) 수정 처리
 - 기존 첨부파일 목록 확인 및 삭제 가능
 - 파일 새로 추가 가능 (다중 업로드 지원)
 - 수정 완료 시 게시글과 파일이 함께 수정됨
***********************************************************************/

1. SpringBoot 개발 순서
 1.1. BoardRepository.java : 데이터베이스 처리
 1.2. BoardService.java : 게시글 내용 수정 및 파일 삭제 및 업로드 기능 추가
 1.3. BoardController.java : 게시글 내용 수정 기능 추가

2. React 개발 순서
 2.1. boardApi.js : SpringBoot 서버로 게시글 및 파일 수정 요청 처리 작성
 2.2. BoardView.jsx : 게시글 수정 버튼 처리 
 2.3. BoardUpdate.jsx : 게시글 수정 페이지 처리 
                      (별도로 components 사용하지 않고 하나의 파일로 처리하였음 - 분리가능)
 2.4. BoardRouters.jsx : 게시글 수정 관련 페이지 URL 패턴 처리

3. 서버 실행 및 확인
 3.1. SpringBoot Backend 서버 실행 : mvnw spring-boot:run
 3.2. React Frontend 서버 실행 : npm start


<게시글과 첨부파일 전체 삭제 처리 기능을 작성>
/**********************************************************************
                          [공통사항]
 **********************************************************************
 - 상세보기 페이지에서 "삭제" 버튼 클릭
 - 게시글 및 관련된 모든 첨부파일(파일시스템과 DB에서) 삭제
 - 삭제 후 전체 게시글 목록 페이지로 이동
***********************************************************************/

1. SpringBoot 개발 순서
 1.1. BoardRepository.java : 데이터베이스 처리
 1.3. BoardService.java : 게시글 삭제 기능, 파일 삭제 기능 추가
 1.4. BoardController.java : 게시글 삭제 기능 추가

2. React 개발 순서
 2.1. boardApi.js : SpringBoot 서버로 게시글 삭제 요청 처리 작성
 2.2. BoardView.jsx : 게시글 삭제 버튼 처리 
                      (별도로 components 사용하지 않고 하나의 파일로 처리하였음 - 분리가능)
 2.3. BoardRouters.jsx : 게시글 수정 관련 페이지 URL 패턴 처리

3. 서버 실행 및 확인
 3.1. SpringBoot Backend 서버 실행 : mvnw spring-boot:run
 3.2. React Frontend 서버 실행 : npm start
