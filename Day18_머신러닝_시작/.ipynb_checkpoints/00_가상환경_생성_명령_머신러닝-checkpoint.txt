1. 새로운 가상환경 생성하기 (폴더 위치 무관)
	- Anaconda Prompt의 (base) 가상환경에서 실행해야 합니다.
	- 설치를 위한 라이브러리 업그레이드 ((가끔 한번씩 수행)
		** 라이브러리 설치 명령어 : conda 또는 pip

		-- conda 라이브러리 업그레이드
			>conda update -n base conda

		-- pip 라이브러리 업그레이트
			>python -m pip install --upgrade pip

	- 가상환경 생성 : 가상환경 이름은 pk_dl_202503
		--> conda create -n 가상환경이름 python=python version
		>conda create -n pk_dl_202503 python=3.9

	- 가상환경 잘 만들어졌는지 확인하기 : 가상환경 목록 리스트 확인하면 됩니다.
		--> 생성된 위치 :  C:\Users\Administrator\anaconda3\envs\pk_base_202503
		>conda env list

	# To activate this environment, use 
		(특정 가상환경으로 들어갈 때 사용, 들어간다는 의미는 활성화 입니다.)
	#     $ conda activate pk_dl_202503

	# To deactivate an active environment, use
		(현재 가상환경에서 빠져 나갈 때, 비활성화 입니다. base 가상환경으로 돌아갑니다.)
	#     $ conda deactivate

	- 가상환경 제거하기
		>conda remove -n pk 가상환경이름 --all

2. 가상환경에 라이브러리 설치하기 (base에서 하시면 안됩니다. 디렉토리 위치 무관)
 - 최초에 한번 pip 업그레이드 합니다.
  >python -m pip install --upgrade pip

 - 커널(Kernel) 생성하기 : pk_dl_202503_kernel
  -- 각 가상환경이 만들어 질 때마다, 커널(Kernel)을 만들어야 합니다.
  -- 커널을 생성하기 위해서는 Jupyter notebook 라이브러리가 필요합니다
  -- Jupyter notebook 라이브러리 설치하기
   >pip install jupyter notebook

  -- 커널(Kernel) 생성 : 가상환경 1개당 커널 1개 생성(가상환경 1개에 커널 2개 이상인 경우 모두 삭제해야함)
			(생성위치 : C:\Users\Administrator\AppData\Roaming\jupyter\kernels\pk_dl_202503)
   >python -m ipykernel install --user --name pk_dl_202503 --display-name pk_dl_202503_kernel

 - 생성된 커널 확인하기 : 커널 목록 확인(가상환경 이름으로 확인)
  >jupyter kernelspec list

 - 커널 삭제하기 : 가상환경을 삭제할 경우에는 커널도 함께 삭제해야 합니다.
  -- 가상환경 삭제 순서 : 커널 삭제 > 가상환경 삭제 (커널 목록(kernelspec list)에 나와 있는 이름 그대로 사용)
   >jupyter kernelspec uninstall pk_base_2025

3. Jupyter notebook open -> 커널 확인
 >jupyter notebook

4. 머신러닝 기본 라이브러리 설치
 - plotly : 시각화
  >pip install ipython jupyter pandas xlrd seaborn pyarrow openpyxl selenium folium plotly
  
  >pip install matplotlib==3.8
  >pip install numpy==1.26

 - 머신러닝 라이브러리 설치
  >pip install scikit-learn==1.5.0
  >pip install xgboost==2.0.2


********************라이브러리 설치 방법********************
*** 가급적 라이브러리 설치는 터미널 창에서 하는 것을 권장함(안정적임)

<anaconda prompt, 터미널창에서 설치 기준>------------------------------
- pip 명령을 이용한 설치
 >pip install 라이브러리이름1==버전, 라이브러리이름1 >=버전, 라이브러리이름1<=버전, .....

- conda 명령을 이용한 설치
 >conda install 라이브러리이름1==버전, 라이브러리이름1 >=버전, 라이브러리이름1<=버전, .....

 (민감한 라이브러리 설치 시 아래 사용)
 >conda install -c conda-forge 라이브러리이름1==버전, 라이브러리이름1 >=버전, 라이브러리이름1<=버전, .....


<jupyter notebook에서 설치 기준>------------------------------------------
** 각 설치 명령어 제일 죈쪽에 느낌표(!)붙이면 자체적으로 터미널에서 실해 시킵니다.
- pip 명령을 이용한 설치
 !pip install 라이브러리이름1=버전, 라이브러리이름1 >=버전, 라이브러리이름1<=버전, .....

- conda 명령을 이용한 설치
 !conda install 라이브러리이름1=버전, 라이브러리이름1 >=버전, 라이브러리이름1<=버전, .....

 (민감한 라이브러리 설치 시 아래 사용)
 !conda install -c conda-forge 라이브러리이름1=버전, 라이브러리이름1 >=버전, 라이브러리이름1<=버전, .....